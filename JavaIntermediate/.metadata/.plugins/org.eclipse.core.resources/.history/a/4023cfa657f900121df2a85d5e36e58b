
public class PixelEffects {

	public static int[][] copy(int[][] source) {
		return resize(source,source.length, source[0].length);
	}
	/**
	 * Resize the array image to the new width and height
	 * You are going to need to figure out how to map between a pixel
	 * in the destination image to a pixel in the source image
	 * @param source
	 * @param newWidth
	 * @param newHeight
	 * @return
	 */
	public static int[][] resize(int[][] source, int newWidth, int newHeight) {
		
		return source;
	}

	public static int[][] half(int[][] source) {
		return source;
	}
	
	public static int[][] resize(int[][] source, int[][] reference) {
		return source;
	}

	/**
	 *	Flips the image over the x-axis.
	 */
	public static int[][] flip(int[][] source) {
		int width = source.length;
		int height = source[0].length;
		int[][] output = new int[width][height];
		
		for (int x = 0 ; x < width ; x++) {
			for (int y = 0 ; y < height ; y++) {
				output[x][y] = source[width - x - 1][y];
			}
			
		}
		
		return source;
	}

	/**
	 *	Mirrors the image over the y-axis.
	 */
	public static int[][] mirror(int[][] source) {
		int width = source.length;
		int height = source[0].length;
		int[][] output = new int[height][width];
		
		for (int x = 0 ; x < height ; x++) {
			for (int y = 0 ; y < width ; y++) {
				output[x][y] = source[width - y - 1][height - x - 1];
			}
		}	
			

		return source;
	}

	/**
	 *	Rotates the image left.
	 */
	public static int[][] rotateLeft(int[][] source) {
		return rotate(rotate(rotate(source)));
	}

	/*
	 *	Rotates the image right.
	 */
	public static int[][] rotate(int[][] source) {
			int width = source.length;
			int height = source[0].length;
			int[][] output = new int[height][width];
			
			for (int x = 0 ; x < height ; x++) {
				for (int y = 0 ; y < width ; y++) {
					output[x][y] = source[y][height - x - 1];
				}
			}	
				return flip(output);
	}


	/** 
	 * Merge the red,blue,green components from two images.
	 */
	public static int[][] merge(int[][] sourceA, int[][] sourceB) {
		return sourceA;
	}

	/**
	 * Replace the green areas of the foreground image with parts of the back
	 * image.
	 */
	public static int[][] chromaKey(int[][] foreImage, int[][] backImage) {
		return foreImage;
	}
 
	/** 
	 *	Remove redeye. Note that sourceB is not used.
	 */
	public static int[][] redeye(int[][] source, int[][] sourceB) {
		int width = source.length;
		int height = source[0].length;
		int[][] result = new int[width][height];
		for (int i = 0; i < width; i++) {
			for (int j = 0; j < height; j++) {
				int rgb = source[i][j];
				int red = RGB.toRed(rgb);
				int green = RGB.toGreen(rgb);
				int blue = RGB.toBlue(rgb);
				if (red > 4 * Math.max(green, blue) && red > 64) {
					red = green = blue = 0;
				}
				result[i][j] = RGB.toRGB(red, green, blue);
			}
		}
		return result;
	}

	/**
	 *	Add some funk to the image.
	 */
	public static int[][] funky(int[][] source, int[][] sourceB) {
		int width = source.length;
		int height = source[0].length;
		int[][] output = new int[width][height];
		
		for (int x = 0; x < width; x++) {
			for (int y = 0 ; y < height ; y++) {
				int pixel = source[x][y];
				int red = RGB.toRed(pixel);
				int blue = RGB.toBlue(pixel);
				int green = RGB.toGreen();
				output[x][y] = RGB.toRGB(red, blue, green);
			}
		}
				
						
						
		return output;
	}
}
